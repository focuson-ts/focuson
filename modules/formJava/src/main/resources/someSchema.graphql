type Query{
  getHelloWorldDomainData:HelloWorldDomainData!
  getPrintRecordItem(accountId: String!):[PrintRecordItem!]!
  getCollectionItem(accountId: String!, clientRef: String!):[CollectionItem!]!
  getCollectionSummary(accountId: String!, clientRef: String!):CollectionSummary!
  getOverpaymentPage(accountId: String!, clientRef: String!):OverpaymentPage!
  getMandate(clientRef: String!):[Mandate!]!
  getAccountAllFlags(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountAllFlags!
  getAccountOverviewAgreementType(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverviewAgreementType!
  getArrearsDetails(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, startDate: String!):ArrearsDetails!
  getAccountOverviewHistory(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverviewHistory!
  getAccountOverviewExcessInfo(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverviewExcessInfo!
  getAccountOverview(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverview!
  getAccountOverviewOptOut(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverviewOptOut!
  getAccountOverviewReason(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AccountOverviewReason!
  getpreJointAccount(accountId: String!, brandRef: String!, dbName: String!):JointAccount!
  getAdditionalInformation(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):AdditionalInformation!
  getBusinessDetailsMain(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):BusinessDetailsMain!
  getDropdowns:Dropdowns!
  getOccupationAndIncomeFullDomain(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):OccupationAndIncomeFullDomain!
  getOtherIncomeResponse(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):OtherIncomeResponse!
  getCreatePlan(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, createPlanId: String!):CreatePlan!
  getEAccountsSummary(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, customerId: String!, employeeType: String!):EAccountsSummary!
  getCreateEAccountData(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, createPlanId: String!):CreateEAccountData!
  getChequeCreditbooks(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):ChequeCreditbooks!
  getRepeatingLine(clientRef: String!):[RepeatingLine!]!
  getPostCodeDataLine(dbName: String!, postcode: String!):[PostCodeDataLine!]!
}
type Mutation{
  createCreatePayment(accountId: String!, clientRef: String!, paymentId: String!,obj: CreatePaymentInp!):CreatePayment!
  stateCollectionItemcancel(accountId: String!, clientRef: String!, paymentId: String!):Boolean
  updateOccupationAndIncomeFullDomain(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!,obj: OccupationAndIncomeFullDomainInp!):OccupationAndIncomeFullDomain!
  createCreatePlan(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!,obj: CreatePlanInp!):CreatePlan!
  updateCreatePlan(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, createPlanId: String!,obj: CreatePlanInp!):CreatePlan!
  deleteCreatePlan(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, createPlanId: String!):Boolean
  stateEAccountsSummaryinvalidate(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!, customerId: String!, employeeType: String!):Boolean
  createETransferDataD(customerId: String!,obj: ETransferDataDInp!):ETransferDataD!
  createCreateEAccountData(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!,obj: CreateEAccountDataInp!):CreateEAccountData!
  createChequeCreditbooks(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!,obj: ChequeCreditbooksInp!):ChequeCreditbooks!
  stateChequeCreditbookscancel(accountId: String!, applRef: String!, brandRef: String!, clientRef: String!):Boolean
  createRepeatingLine(clientRef: String!,obj: [RepeatingLineInp!]!):[RepeatingLine!]!
  createPostCodeNameAndAddress(,obj: PostCodeNameAndAddressInp!):PostCodeNameAndAddress!
}
type AccountAllFlags{
  flags: [AccountOneFlag!]!
}
type AccountDetails{
  contactTitle: String!
  contactForename: String!
  contactSurname: String!
  practice: String!
  addressLine1: String!
  addressLine2: String!
  addressLine3: String!
  addressLine4: String!
  postcode: String!
  telephone: String!
}
type AccountOneFlag{
  flagName: String!
  flagValue: Boolean!
}
type AccountOverview{
  score: Int!
  accountType: String!
  drawDownDate: String!
  repaymentDate: String!
  propertyValue: Int!
  mul: Int!
  drawDownAmount: Int!
  criteria: [AccountOverviewCriteriaLine!]!
  zFlagSet: String!
  excessSixMonths: Int!
  bouncedDDs12Months: Int!
  unpaidCardOrMisuseItems: Int!
  currentBalance: Int!
  currentInterestRate: Int!
  facilities: AccountOverviewFacilities!
  highBalance: Int!
  lowBalance: Int!
  pctOfFacility: Int!
  eightyPctFacility: Int!
  eightyFivePctFacility: Int!
}
type AccountOverviewAgreementType{
  agreementType: String!
  transactionHeading: String!
}
type AccountOverviewCriteriaLine{
  criteria: String!
}
type AccountOverviewExcessHistoryLine{
  start: String!
  end: String!
  consecutiveDays: Int!
}
type AccountOverviewExcessInfo{
  dayOfCurrentExcess: Int!
  currentExcessOnAccount: Int!
  currentPctExcess: Int!
  dateOfLastCapitalization: String!
  dateOfLastExcessFulfillment: String!
}
type AccountOverviewFacilities{
  facilities: [AccountOverviewFacilitiesLine!]!
}
type AccountOverviewFacilitiesLine{
  facility: Int!
  changeDate: String!
  unApproved: Boolean!
  reason: String!
  amount: Int!
}
type AccountOverviewHistory{
  history: [AccountOverviewExcessHistoryLine!]!
}
type AccountOverviewOptOut{
  optOut: [AccountOverviewOptOutLine!]!
}
type AccountOverviewOptOutLine{
  optedOut: Boolean!
  addrLine5: String!
  changedBy: String!
  changedDate: String!
}
type AccountOverviewReason{
  reason: String!
}
type AdditionalInformation{
  applicantName: String!
  employerName: String!
  addressLine1: String!
  addressLine2: String!
  addressLine3: String!
  addressLine4: String!
  postcode: String!
}
type ArrearsDetails{
  details: [ArrearsDetailsLine!]!
}
type ArrearsDetailsLine{
  collectionsDate: String!
  creditedDate: String!
  minPayment: Int!
  contractualAmount: Int!
  paymentType: String!
  paymentReceived: Int!
  shortfall: Int!
  arrearsTotal: Int!
  missedPayments: Int!
}
type BusinessDetails{
  applicantName: String!
  businessName: String!
  addressLine1: String!
  addressLine2: String!
  addressLine3: String!
  addressLine4: String!
  postcode: String!
}
type BusinessDetailsMain{
  businessDetails: BusinessDetails!
  businessFinancialDetails: BusinessFinancialDetails!
  detailsOfNonRecurringItems: DetailsOfNonRecurringItems!
  detailsOfReevaluationOfAssets: DetailsOfReevaluationOfAssets!
  accountantDetails: AccountDetails!
}
type BusinessFinancialDetails{
  turnoverLastYear: String!
  turnoverPenultimateYear: String!
  netProfitLastYear: String!
  netProfitPenultimateYear: String!
  drawingsLastYear: String!
  drawingsPenultimateYear: String!
  dividendsLastYear: String!
  dividendsPenultimateYear: String!
  netAssetsLastYear: String!
  netAssetsPenultimateYear: String!
}
type ChequeCreditbooks{
  history: [ChequeCreditbooksHistoryLine!]!
}
type ChequeCreditbooksHistoryLine{
  serialNumber: Int!
  howOrdered: String!
  dateOrder: String!
}
type CollectionItem{
  paymentId: Int!
  collectionDate: String!
  amount: Int!
  status: String!
}
type CollectionSummary{
  lastCollectionDate: String!
  lastCollectionAmount: Int!
  nextCollectionDate: String!
  nextCollectionAmount: Int!
  allowance: Int!
  period: String!
}
type ContractTypesResponse{
  contractTypeId: Int!
  description: String!
}
type CreateEAccountData{
  name: String!
  type: String!
  savingsStyle: String!
  initialAmount: Int!
}
type CreatePayment{
  amount: Int!
  collectionDate: String!
  reason: String!
  allowance: Int!
  period: String!
}
type CreatePlan{
  createPlanStart: String!
  createPlanDate: String!
  createPlanEnd: String!
}
type DetailsOfNonRecurringItems{
  nonRecurringItems: String!
}
type DetailsOfReevaluationOfAssets{
  revaluationOfAssets: String!
}
type Dropdowns{
  occupationDescriptionResponse: OccupationDescriptionResponse!
  employmentStatus: EmploymentStatus!
  contractTypesResponse: ContractTypesResponse!
  frequenciesResponse: FrequenciesResponse!
}
type EAccountsSummary{
  useEStatements: Boolean!
  eAccountsTable: [EAccountSummary!]!
  totalMonthlyCost: Int!
  oneAccountBalance: Int!
  currentAccountBalance: Int!
  createPlan: CreatePlan!
}
type EAccountSummary{
  accountId: Int!
  displayType: String!
  description: String!
  virtualBankSeq: String!
  total: Int!
  frequency: String!
}
type EmploymentStatus{
  employmentName: String!
  employmentValue: String!
}
type ETransferDataD{
  account: Int!
  dateOfETransfer: String!
  description: String!
  fromAccount: Int!
  toAccount: Int!
  monitoringAccount: Int!
  type: String!
  balance: Int!
  notes: String!
}
type FrequenciesResponse{
  frequencyId: Int!
  frequencyDescription: String!
  annualMultiple: Int!
}
type HelloWorldDomainData{
  message: String!
}
type JointAccount{
  balance: Int!
  main: JointAccountCustomer!
  joint: JointAccountCustomer!
}
type JointAccountAddress{
  line1: String!
  line2: String!
}
type JointAccountCustomer{
  name: String!
  addresses: [JointAccountAddress!]!
}
type ListOfPayments{
  standingOrders: SinglePrint!
  openBankingStandingOrders: SinglePrint!
  directDebits: SinglePrint!
  billPayments: SinglePrint!
  openBanking: SinglePrint!
}
type Mandate{
  sortCode: String!
  accountId: Int!
  mandateStatus: String!
  bankName: String!
  accountName: String!
  mandateRef: String!
}
type OccupationAndIncomeFullDomain{
  mainCustomerName: String!
  jointCustomerName: String!
  mainClientRef: Int!
  jointClientRef: Int!
  customerOccupationIncomeDetails: [OneOccupationIncomeDetails!]!
}
type OccupationDescriptionResponse{
  descTypeValue: String!
  descTypeName: String!
}
type OneOccupationIncomeDetails{
  areYou: String!
  occupation: String!
  customerDescription: String!
  ownShareOfTheCompany: String!
  owningSharesPct: String!
  workFor: String!
  employmentType: String!
  empStartDate: String!
  empEndDate: String!
  annualSalaryBeforeDeduction: Int!
  annualIncomeExcludingRent: Int!
  regularCommissionBonus: Int!
  whatTypeOfBusiness: String!
  whatNameBusiness: String!
  establishedYear: String!
  annualDrawing3Yrs: Int!
  otherSourceOfIncome: String!
  createdBy: String!
  createdDate: String!
  employerName: String!
  sePositionHeld: String!
  occupationCategory: String!
  empEmploymentSeq: Int!
  empAppRoleSeq: Int!
  accountantAppRoleSeq: Int!
  currentEmployment: String!
}
type OtherIncomeResponse{
  clientOtherIncomeSeq: String!
  otherIncomeType: String!
  incomeFreqRef: String!
  amount: Int!
}
type OverpaymentHistoryLine{
  amountReceived: Int!
  date: String!
  status: String!
}
type OverpaymentPage{
  history: [OverpaymentHistoryLine!]!
  drawDownDate: String!
  initialBorrowing: Int!
}
type PostCodeDataLine{
  line1: String!
  line2: String!
  line3: String!
  line4: String!
  postcode: String!
}
type PostCodeNameAndAddress{
  name: String!
  line1: String!
  line2: String!
  line3: String!
  line4: String!
  postcode: String!
}
type PrintRecordItem{
  requestedBy: String!
  requesterDetails: RequesterDetails!
  listOfPayments: ListOfPayments!
  includeSingleAndInitialDirectDebits: Boolean!
  authorisedByCustomer: String!
  alreadyPrinted: Boolean!
}
type RepeatingLine{
  name: String!
  age: Int!
}
type RequesterDetails{
  title: String!
  forename: String!
  surname: String!
  addressLine1: String!
  addressLine2: String!
  addressLine3: String!
  addressLine4: String!
  postcode: String!
  phone: String!
  fax: String!
}
type SinglePrint{
  shouldPrint: Boolean!
  numberOfItems: Int!
}
input ChequeCreditbooksInp{
  history: [ChequeCreditbooksHistoryLineInp!]!
}
input ChequeCreditbooksHistoryLineInp{
  serialNumber: Int!
  howOrdered: String!
  dateOrder: String!
}
input CreateEAccountDataInp{
  name: String!
  type: String!
  savingsStyle: String!
  initialAmount: Int!
}
input CreatePaymentInp{
  amount: Int!
  collectionDate: String!
  reason: String!
  allowance: Int!
  period: String!
}
input CreatePlanInp{
  createPlanStart: String!
  createPlanDate: String!
  createPlanEnd: String!
}
input ETransferDataDInp{
  account: Int!
  dateOfETransfer: String!
  description: String!
  fromAccount: Int!
  toAccount: Int!
  monitoringAccount: Int!
  type: String!
  balance: Int!
  notes: String!
}
input OccupationAndIncomeFullDomainInp{
  mainCustomerName: String!
  jointCustomerName: String!
  mainClientRef: Int!
  jointClientRef: Int!
  customerOccupationIncomeDetails: [OneOccupationIncomeDetailsInp!]!
}
input OneOccupationIncomeDetailsInp{
  areYou: String!
  occupation: String!
  customerDescription: String!
  ownShareOfTheCompany: String!
  owningSharesPct: String!
  workFor: String!
  employmentType: String!
  empStartDate: String!
  empEndDate: String!
  annualSalaryBeforeDeduction: Int!
  annualIncomeExcludingRent: Int!
  regularCommissionBonus: Int!
  whatTypeOfBusiness: String!
  whatNameBusiness: String!
  establishedYear: String!
  annualDrawing3Yrs: Int!
  otherSourceOfIncome: String!
  createdBy: String!
  createdDate: String!
  employerName: String!
  sePositionHeld: String!
  occupationCategory: String!
  empEmploymentSeq: Int!
  empAppRoleSeq: Int!
  accountantAppRoleSeq: Int!
  currentEmployment: String!
}
input PostCodeNameAndAddressInp{
  name: String!
  line1: String!
  line2: String!
  line3: String!
  line4: String!
  postcode: String!
}
input RepeatingLineInp{
  name: String!
  age: Int!
}